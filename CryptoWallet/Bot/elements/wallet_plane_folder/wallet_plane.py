import asyncio


from aiogram import Router

from aiogram import Bot, types
from aiogram.filters import Command
from aiogram.types import Message

from aiogram.types import (
    InlineKeyboardMarkup, # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    InlineKeyboardButton, # –∫–Ω–æ–ø–∫–∏ InlineKeyboardMarkup
)

from Bot.elements.settings_plane_folder import settings_plane

from database import database_func

from Bot.blockchain.BSC.BNB import utils
from Bot.blockchain.BSC import balance

router=Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ wallet
async def send_to_wallet(bot:Bot,chat_id, message_id=None):
    if (await database_func.check_wallet_in_db(chat_id)) == True:
        url = "https://bscscan.com/address/" + await database_func.get_address(chat_id)
        wallet = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="transfer")
                ],
                [
                    InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", url=url)
                ],
                [
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="start")
                ],
            ],
            resize_keyboard=True,  # –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
            one_time_keyboard=True,  # —Å–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π",  # —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–æ–∫
            selective=True  # –¥–ª—è –≥—Ä—É–ø–ø/—á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ –±—ã–ª —Ç–æ–ª—å–∫–æ —É 1–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        txts = f"<b>–ö–æ—à–µ–ª—ë–∫</b>\n\n–í–∞—à –∞–¥—Ä–µ—Å:\n\n<code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüî∑ Ethereum: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüü° Binance Coin: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüü¢ Tether: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüîµ Toncoin: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüü† Bitcoin: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüî¥ TRON: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüü¢ Solana: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüü¶ Litecoin: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>\n\nüîµ USD Coin: <code>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</code>"
        if message_id is not None:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=txts)
        else:
            message = await bot.send_message(chat_id, text=txts)
            message_id = message.message_id
        adress = str(await database_func.get_address(chat_id))

        balances = await balance.get_all_balances(adress)
        USDinRUB = float(await utils.get_USD_in_RUB()) # –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ —Ä—É–±–ª—è
        
        balance_ETH = float(balances.get('ETH', 0))
        balance_BNB = float(await balance.get_balance_in_BNB(adress))
        balance_USDT = float(balances.get('USDT', 0))
        balance_TON = float(balances.get('TON', 0))
        balance_BTC = float(balances.get('BTC', 0))
        balance_TRX = float(balances.get('TRX', 0))
        balance_SOL = float(balances.get('SOL', 0))
        balance_LTC = float(balances.get('LTC', 0))
        balance_USDC = float(balances.get('USDC', 0))

        eth_price = await balance.get_ETH_in_USDT() or 0
        bnb_price = await balance.get_BNB_in_USDT() or 0
        ton_price = await balance.get_TON_in_USDT() or 0
        btc_price = await balance.get_BTC_in_USDT() or 0
        trx_price = await balance.get_TRX_in_USDT() or 0
        sol_price = await balance.get_SOL_in_USDT() or 0
        ltc_price = await balance.get_LTC_in_USDT() or 0

        eth_value = balance_ETH * eth_price
        bnb_value = balance_BNB * bnb_price
        usdt_value = balance_USDT * 1.0  
        ton_value = balance_TON * ton_price
        btc_value = balance_BTC * btc_price
        trx_value = balance_TRX * trx_price
        sol_value = balance_SOL * sol_price
        ltc_value = balance_LTC * ltc_price
        usdc_value = balance_USDC * 1.0  

        balance_ETH = f"{balance_ETH:.7f}"
        balance_BNB = f"{balance_BNB:.7f}"
        balance_USDT = f"{balance_USDT:.7f}"
        balance_TON = f"{balance_TON:.7f}"
        balance_BTC = f"{balance_BTC:.7f}"
        balance_TRX = f"{balance_TRX:.7f}"
        balance_SOL = f"{balance_SOL:.7f}"
        balance_LTC = f"{balance_LTC:.7f}"
        balance_USDC = f"{balance_USDC:.7f}"
        
        total_usd = (
            eth_value + bnb_value + usdt_value + ton_value + 
            btc_value + trx_value + sol_value + ltc_value + usdc_value
        )
        
        total_usd_f = f"{total_usd:.2f}"
        total_rub = total_usd * USDinRUB
        total_rub_f= f"{total_rub:.2f}"
        



        wallet_n = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"üî∑ Ethereum:                   {balance_ETH}  ETH          |", callback_data=f"ETH_BSC:{balance_ETH}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üü° Binance Coin:             {balance_BNB}  BNB          |", callback_data=f"BNB_BSC:{balance_BNB}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üü¢ Tether:                       {balance_USDT}  USDT         |", callback_data=f"USDT_BSC:{balance_USDT}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üîµ Toncoin:                     {balance_TON}  TON          |", callback_data=f"TON_BSC:{balance_TON}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üü† Bitcoin:                     {balance_BTC}  BTC           |", callback_data=f"BTC_BSC:{balance_BTC}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üî¥ TRON:                        {balance_TRX}  TRX           |", callback_data=f"TRX_BSC:{balance_TRX}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üü¢ Solana:                       {balance_SOL}  SOL          |", callback_data=f"SOL_BSC:{balance_SOL}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üü¶ Litecoin:                    {balance_LTC}  LTC           |", callback_data=f"LTC_BSC:{balance_LTC}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text=f"üîµ USD Coin:                  {balance_USDC}  USDC       |", callback_data=f"USDC_BSC:{balance_USDC}:{USDinRUB}")
                ],
                [
                    InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", url=url)
                ],
                [
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="start")
                ]
            ],
            resize_keyboard=True,  # –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
            one_time_keyboard=True,  # —Å–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π",  # —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–æ–∫
            selective=True  # –¥–ª—è –≥—Ä—É–ø–ø/—á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ –±—ã–ª —Ç–æ–ª—å–∫–æ —É 1–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        #txt =f"<b>–ö–æ—à–µ–ª—ë–∫</b>\n\n–í–∞—à –∞–¥—Ä–µ—Å:\n\n<code>{adress}</code>\n\n–ë–∞–ª–∞–Ω—Å –≤ BNB: <code>{balance_BNB}</code>\n\n–ë–∞–ª–∞–Ω—Å –≤ USD: <code>{balanse_BNB_in_USD}</code>\n\n–ë–∞–ª–∞–Ω—Å –≤ RUB: <code>{balanse_BNB_in_RUB}</code>"
        txt = f"<b>–ö–æ—à–µ–ª—ë–∫</b>\n\n–í–∞—à –∞–¥—Ä–µ—Å:\n\n<code>{adress}</code>\n\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:  \n\nRUB: {total_rub_f} \n\nUSD: {total_usd_f} \n\n–ë–∞–ª–∞–Ω—Å—ã:\n"
        await bot.edit_message_text(chat_id=chat_id, 
                                    message_id=message_id, 
                                    text=txt, 
                                    reply_markup=wallet_n
                                    )
    else:
        if message_id is not None:
            txt = "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞!"
            await bot.edit_message_text(chat_id=chat_id, 
                                        message_id=message_id, 
                                        text=txt
                                        )
            await asyncio.sleep(2)
            await settings_plane.send_to_settings(bot, 
                                                  chat_id, 
                                                  message_id
                                                  )
        else:
            txt = "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞!"
            message = await bot.send_message(chat_id=chat_id, 
                                             text=txt
                                             )
            await asyncio.sleep(2)
            message_id = message.message_id
            await settings_plane.send_to_settings(bot, 
                                                  chat_id, 
                                                  message_id=message_id
                                                  )

# –í wallet –ø–æ –∫–æ–º–∞–Ω–¥–µ /wallet
@router.message(Command("wallet"))
async def wallet_command(message: Message,bot:Bot):
   # await message.delete()
    await send_to_wallet(bot, 
                          message.chat.id
                          )
    
# –í wallet —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda query: query.data == 'wallet')
async def wallet_menu_callback(callback_query: types.CallbackQuery,bot:Bot):
    await callback_query.answer()
    await send_to_wallet(bot, 
                          callback_query.message.chat.id, 
                          callback_query.message.message_id
                          )

